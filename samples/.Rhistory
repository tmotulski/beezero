demo()
library(ggplot2)
import ggplot2
install.packages("ggplot2")
cls
library(ggplot2)
?diamonds
str(diamonds)
diamonds
summary(diamonds)
qplot(price, data = diamonds)
getwd
data(diamods)
data(diamonds)
library(ggplot2)
data(diamonds)
summary(diamonds)
View(diamonds)
ggplot(diamonds)
library("stats", lib.loc="C:/Program Files/R/R-3.3.0/library")
number_1 <- 10
number_2 <- 0
number_3 <- 15
result <-  number_1 +  number_2 >  number_3
number_1 <- 10
number_2 <- 0
number_3 <- 15
result <-  number_1 +  number_2 >  number_3
result
number_1 <- 10
number_2 <- 0
number_3 <- 15
result <-  (number_1 +  number_2) >  number_3
result
(
number_1 <- 10
number_2 <- 0
number_3 <- 15
(number_1 +  number_2) >  number_3
result <-  (number_1 +  number_2) >  number_3
result
number_1 <- 10
number_2 <- 1
number_3 <- 15
(number_1 +  number_2) >  number_3
result <-  (number_1 +  number_2) >  number_3
result
number_1 +  number_2 >  number_3
number_1 <- 10
number_2 <- 1
number_3 <- 15
number_1 +  number_2
result <-  (number_1 +  number_2) >  number_3
result
data(mtcars)
my_data <- mtcars
my_data$gear %% 2
my_data$even_gear <- c(my_data$gear %% 2)
mtcars$even_gear <- c(mtcars$gear %% 2)
!mtcars$gear %% 2
mtcars$even_gear <- c(!mtcars$gear %% 2)
mtcars$gear % 2
mtcars$gear / 2
mtcars$gear %% 2 == 1
mtcars$even_gear <- c(mtcars$gear %% 2 == 1)
mtcars$even_gear <- c(as.integer(mtcars$gear %% 2 == 1))
mtcars$even_gear <- c(as.integer(mtcars$gear %% 2 == 0))
mtcars$mpg[mtcars$cyl == 4]
mtcars[c(3,7,9,12,nrows(mtcars)),]
tcars[c(3,7,9,12,nrow(mtcars)),]
mtcars[c(3,7,9,12,nrow(mtcars)),]
# control statements
mydata <- read.csv('evals.csv')
# if
a <-
if (a > 0){
print('positive')
} else {
print('not positive')
}
if (a > 0){
print('positive')
} else print('not positive')
if (a > 0){
print('positive')
} else if (a < 0) {
print('negative')
} else print('zero')
# ifelse
a <- 10
ifelse(a > 0, 'positive', 'not positive')
a <- c(1, -1)
# for
for (i in 1:100){
print(i)
}
for (i in 1:nrow(mydata)){
print(mydata$score[i])
}
# for + if
for (i in 1:nrow(mydata)){
if (mydata$gender[i] == 'male'){
print(mydata$score[i])
}
}
# for + if  VS  ifelse
mydata$quality <- rep(NA, nrow(mydata))
for (i in 1:nrow(mydata)){
if (mydata$score[i] > 4){
mydata$quality[i] <- 'good'
} else mydata$quality[i] <- 'bad'
}
mydata$quality2 <- ifelse(mydata$score > 4, 'good', 'bad')
# while
i <- 1
while(i < 51){
print(mydata$score[i])
i <- i+1
}
mtcars$carb >= 4 | mtcars$cyl >6
data(mtcars)
my_data <- mtcars
my_vector <- c(20.67, 23.34, 22.65, 17.11, 22.1, 26.32, 20.39)
my_vector <- c(20.67, 23.34, 22.65, 17.11, 22.1, 26.32, 20.39)
if (mean(my_vector) >20) {
result <- 'My mean is great'
} else {
result <- 'My mean is not so great'
}
?AirPassengers
str(AirPassengers)
data(AirPassengers)
AirPassengers
?vector
?AirPassengers
nrow(AirPassengers)
length(AirPassengers)
for (i in 1:length(AirPassengers)) {
if (AirPassengers[i] > AirPassengers[i-1]) {
good_months <- c(AirPassengers[i])
}
}
for (i in 2:length(AirPassengers)) {
if (AirPassengers[i] > AirPassengers[i-1]) {
good_months <- c(AirPassengers[i])
}
}
for (i in 2:length(AirPassengers)) {
if (AirPassengers[i] > AirPassengers[i-1]) {
good_months <- c(good_months, AirPassengers[i])
}
}
good_months <- c()
good_months <- c()
for (i in 2:length(AirPassengers)) {
if (AirPassengers[i] > AirPassengers[i-1]) {
good_months <- c(good_months, AirPassengers[i])
}
}
for (i in 1:length(AirPassengers)-9) {
temp_var <- c(AirPassengers[i]:AirPassengers[i+9])
moving_average <- c(moving_average, mean(temp_var))
}
}
moving_average <- c()
for (i in 1:length(AirPassengers)-9) {
temp_var <- c(AirPassengers[i]:AirPassengers[i+9])
moving_average <- c(moving_average, mean(temp_var))
}
}
moving_average <- c()
for (i in 1:length(AirPassengers)-9) {
temp_var <- c(AirPassengers[i]:AirPassengers[i+9])
moving_average <- c(moving_average, mean(temp_var))
}
for (i in 1:(length(AirPassengers)-9) {
temp_var <- c(AirPassengers[i]:AirPassengers[i+9])
moving_average <- c(moving_average, mean(temp_var))
}
moving_average <- c()
for (i in 1:(length(AirPassengers)-9) {
temp_var <- c(AirPassengers[i]:AirPassengers[i+9])
moving_average <- c(moving_average, mean(temp_var))
}
length(AirPassengers)
for (i in 1:(length(AirPassengers)-9) {
moving_average <- c(moving_average, mean(c(AirPassengers[i]:AirPassengers[i+9])))
}
for (i in 1:(length(AirPassengers)-9) {
moving_average <- c(moving_average, mean(c(AirPassengers[i]:AirPassengers[i+8])))
}
moving_average <- c()
for (i in 1:(length(AirPassengers))) {
moving_average <- c(moving_average, mean(c(AirPassengers[i]:AirPassengers[i+9])))
}
length(AirPassengers)-9
moving_average <- c()
for (i in 1:(length(AirPassengers)-9)) {
moving_average <- c(moving_average, mean(c(AirPassengers[i:i+9])))
}
moving_average <- c()
for (i in 1:(length(AirPassengers)-9)) {
moving_average <- c(moving_average, mean(c(AirPassengers[i:i+9])))
}
moving_average <- c()
for (i in 1:(length(AirPassengers)-9)) {
moving_average <- c(moving_average, mean(c(AirPassengers[i:(i+9)])))
}
mean(mtcars$qsec[mtcars$cyl!=3 & mtcars$mpg>30])
descriptions_stat <- aggregate(x = mtcars$hp, by = list(mtcars$vs), FUN = sd)
View(descriptions_stat)
descriptions_stat <- aggregate(cbind(hp, disp) ~ am + vs, df, sd)
descriptions_stat <- aggregate(cbind(hp, disp) ~ am + vs, mtcars, sd)
descriptions_stat <- aggregate(cbind(hp, disp) ~ vs, mtcars, sd)
view(mtcars)
View(mtcars)
?mtcars
descriptions_stat <- aggregate(cbind(hp, disp) ~ am, mtcars, sd)
?airquality
View(airquality)
airquality
airquality$Ozone[airquality$Month == c(7,8,9)]
?aggregate
result <- aggregate (airquality$Ozone, airquality$Month == c(7,8,9))
result <- aggregate (airquality$Ozone, airquality$Month == c(7,8,9), FUN)
result <- aggregate (airquality$Ozone, airquality$Month == c(7,8,9), FUN=length())
result <- aggregate (airquality$Ozone, airquality$Month == c(7,8,9), FUN=length(airquality$Ozone))
result <- aggregate (airquality$Ozone, airquality$Month == c(7,8,9), mean)
result <- aggregate (airquality$Ozone, by = airquality$Month == c(7,8,9), FUN=mean)
result <- aggregate (airquality$Ozone, by = list(airquality$Month == c(7,8,9)), FUN=mean)
result <- aggregate (airquality$Ozone, by = list(airquality$Month == c(7,8,9)), FUN=sd)
View(result)
airquality$Month == c(7,8,9)
airquality$Month %in% c(7,8,9)
?length
result <- length(aggregate (airquality$Ozone, by = list(airquality$Month %in% c(7,8,9)), FUN=sd))
aggregate (airquality$Ozone, by = list(airquality$Month %in% c(7,8,9)), FUN=sd)
airquality$Ozone
aggregate (airquality$Month %in% c(7,8,9)), by = list(airquality$Ozone), FUN=sd)
airquality$Month %in% c(7,8,9)
airquality$Ozone[airquality$Month %in% c(7,8,9)]
airquality[airquality$Month %in% c(7,8,9)]
airquality[,airquality$Month %in% c(7,8,9)]
airquality[Month %in% c(7,8,9)]
aggregate(y ~ x + z , airquality$Ozone[airquality$Month %in% c(7,8,9)], FUN)
aggregate(y ~ x + z , airquality$Ozone[airquality$Month %in% c(7,8,9)], FUN)
airquality_subset <- subset(airquality, Month %in% c(7,8,9))
View(airquality_subset)
aggregate(y ~ x + z , airquality_subset, FUN)
aggregate(Ozone ~ Month , airquality_subset, FUN)
aggregate(Ozone ~ Month , airquality_subset)
aggregate(Ozone ~ Month , airquality_subset, FUN = mean)
aggregate(Ozone ~ Month , airquality_subset, FUN = sd)
aggregate(Ozone ~ Month , airquality_subset, FUN = length)
aggregate(Ozone ~ Month , subset(airquality, Month %in% c(7,8,9)), FUN = length)
describeBy(airquality, group = list(airquality$Month))
library(psych)
install.packages("psych")
library(psych)
library(psych)
describeBy(airquality, group = list(airquality$Month))
?iris
View(iris)
describeBy(iris)
describe(iris)
describeBy(iris, group = list(iris$Species))
my_vector <- rnorm(30)
my_vector[sample(1:30, 10)] <- NA # на десять случайных позиций поместим NA
fixed_vector <- mean(my_vector)
fixed_vector <- mean(my_vector,na.rm=TRUE)
my_vector[is.na(my_vector)]
is.na(my_vector)
fixed_vector <- replace(my_vector, my_vector == NA, mean(my_vector,na.rm=TRUE))
fixed_vector <- is.na(my_vector)
fixed_vector[is.na(my_vector)] <- mean(my_vector,na.rm=TRUE)
my_vector <- rnorm(30)
my_vector[sample(1:30, 10)] <- NA # на десять случайных позиций поместим NA
my_vector[is.na(my_vector)] <- mean(my_vector,na.rm=TRUE)
my_vector <- rnorm(30)
my_vector[sample(1:30, 10)] <- NA # на десять случайных позиций поместим NA
fixed_vector <- my_vector
fixed_vector[is.na(fixed_vector)] <- mean(fixed_vector,na.rm=TRUE)
#Step 1: Base graphs
df  <- mtcars
df$vs  <- factor(df$vs  , labels = c("V", "S"))
df$am  <- factor(df$am  , labels = c("Auto", "Manual"))
hist(df$mpg, breaks = 20, xlab = "MPG", main ="Histogram of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(density(df$mpg), xlab = "MPG", main ="Density of MPG",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(mpg ~ am, df, ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
boxplot(df$mpg[df$am == "Auto"], df$mpg[df$am == "Manual"], ylab = "MPG", main ="MPG and AM",
col = "green", cex.lab = 1.3, cex.axis = 1.3)
plot(df$mpg, df$hp, xlab = "MPG", ylab ="HP" , main ="MPG and HP", pch = 22)
plot(~ mpg + hp, df)
#Step 2, 3: Library ggplot2
library(ggplot2)
ggplot(df, aes(x = mpg))+
geom_histogram(fill = "white", col = "black", binwidth = 2)+
xlab("Miles/(US) gallon")+
ylab("Count")+
ggtitle("MPG histogram")
ggplot(df, aes(x = mpg, fill = am))+
geom_dotplot()+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG dotplot")
ggplot(df, aes(x = mpg))+
geom_density(fill = "red")
ggplot(df, aes(x = mpg, fill = am))+
geom_density(alpha = 0.5)+
xlab("Miles/(US) gallon")+
ylab("Count")+
scale_fill_discrete(name="Transmission type")+
ggtitle("MPG density plot")
ggplot(df, aes(x = am, y = hp, fill = vs))+
geom_boxplot()+
xlab("Transmission type")+
ylab("Gross horsepower")+
scale_fill_discrete(name="Engine type")+
ggtitle("Gross horsepower and engine type")
ggplot(df, aes(x = mpg, y = hp, size = qsec))+
geom_point()+
xlab("Miles/(US) gallon")+
ylab("Gross horsepower")+
scale_size_continuous(name="1/4 mile time")+
ggtitle("Miles/(US) gallon and Gross horsepower")
my_plot  <- ggplot(df, aes(x = mpg, y = hp, col = vs, size = qsec))+
geom_point()
my_plot2  <- ggplot(df, aes(x = am, y = hp, fill = vs))
my_plot2 + geom_boxplot()
ggplot(airquality, aes = list(x = Month, y = Ozone)) + geom_dotplot()
library(ggplot)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(ggplot)
ggplot(airquality, aes = list(x = Month, y = Ozone)) + geom_dotplot()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(airquality, aes = list(x = Month, y = Ozone)) + geom_dotplot()
ggplot(airquality, aes = list(x = Month, y = Ozone)) + geom_boxplot()
ggplot(airquality, aes(factor(Month),Ozone) + geom_boxplot()
ggplot(airquality, aes(factor(Month),Ozone) + geom_boxplot()
library(ggplot2)
ggplot (airquality, aes(factor(Month),Ozone) + geom_boxplot()
ggplot (airquality, aes(factor(Month),Ozone)) + geom_boxplot()
ggplot (airquality, aes(factor(Month),Ozone)) + geom_boxplot()
plot1 <- ggplot(mtcars, aes(mpg, disp))+
geom_point(shape=1)
ggplot(mtcars, aes(mpg, disp)) + geom_point(shape=1)
ggplot(mtcars, aes(mpg, disp),col=hp) + geom_point(shape=1)
ggplot(mtcars, aes(mpg, disp),color=hp) + geom_point(shape=1)
ggplot(mtcars, aes(mpg, disp))+
geom_point(aes(colour = hp))
ggplot(mtcars, aes(x = mpg, y = disp))+
geom_point(aes(colour = hp))
data <- mtcars
plot1 <- ggplot(data, aes(x = mpg, y = disp))+
geom_point(aes(colour = hp))
data <- mtcars
plot1 <- ggplot(data, aes(x = mpg, y = disp, color = hp)+
geom_point()
ggplot(data, aes(x = mpg, y = disp, color = hp)+
geom_point()
ggplot(data, aes()+
geom_point(x = mpg, y = disp, color = hp)
ggplot(data, aes()+
geom_point(x = mpg, y = disp, color = hp)
data <- mtcars
plot1 <- ggplot(data, aes(x = mpg, y = disp, col = hp))+
geom_point()
library(ggplot2)
data <- mtcars
plot1 <- ggplot(data, aes(x = mpg, y = disp, col = hp))+
geom_point()
ggplot(data, aes(x = mpg, y = disp, col = hp))+
geom_point()
data <- mtcars
plot1 <- ggplot(data, aes(x = mpg, y = disp))+
geom_point(aes(colour = hp))
ggplot(data, aes(x = mpg, y = disp))+
geom_point(aes(colour = hp))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
iris
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(col = Species))
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point(iris, size = Petal.Length)
install.packages("rjson")
library("rjson")
json_data <- fromJSON(file=muc-2016-09-26T19_07_24+0200.json)
json_data <- fromJSON(file="muc-2016-09-26T19_07_24+0200.json")
str(json_data)
json_data <- fromJSON(file="2016-09-26T08_55_00+0200.json")
str(json_data)
install.packages("jsonlite")
require(jsonlite)
setwd("c:/Projects/Carsharing/beezero/samples")
for (fileCount in seq_along(files)) {
filename <- files[fileCount]
rd <- fromJSON(filename)
}
seq_along(files)
files <- list.files(pattern = ".json")
for (fileCount in seq_along(files)) {
filename <- files[fileCount]
rd <- fromJSON(filename)
}
available_vehicles_df <- json_data$available_vehicles$name
json_data <- fromJSON(filename)
available_vehicles_df <- json_data$available_vehicles$name
available_vehicles_df <- json_data$availableVehicles$name
available_vehicles_df <- json_data$responce$availableVehicles$name
available_vehicles_df <- json_data$responce$availableVehicles$name[1]
available_vehicles_df <- json_data$responce
name(json_data)
names(json_data)
available_vehicles_df <- json_data$response
available_vehicles_df <- json_data$response$availableVehicles
View(available_vehicles_df)
strptime(substr(filename, 1, 18), "%Y-%m-%dT%H_%M_%S", tz="Europe/Berlin"))
strptime(substr(filename, 1, 18), "%Y-%m-%dT%H_%M_%S", tz="Europe/Berlin")
require(jsonlite)
setwd("c:/Projects/Carsharing/beezero/samples")
files <- list.files(pattern = ".json")
vehicles_df <- data.frame()
for (fileCount in seq_along(files)) {
filename <- files[fileCount]
json_data <- fromJSON(filename)
names(json_data)
available_vehicles_df <- json_data$response$availableVehicles
vehicles_df <- rbind(vehicles_df, data.frame(
filename = strptime(substr(filename, 1, 18), "%Y-%m-%dT%H_%M_%S", tz="Europe/Berlin"),
id = available_vehicles_df$id,
name = available_vehicles_df$name,
lat = available_vehicles_df$coordinate.latitude,
lng = available_vehicles_df$coordinate.longitude,
fuelLevel = available_vehicles_df$fuelLevel,
lastAddr = available_vehicles_df$lastAddress
))
}
write.table(vehicles_df, "vehicles_df.csv", col.names=TRUE, row.names = FALSE, sep=",")
strptime(substr(filename, 1, 18), "%Y-%m-%dT%H_%M_%S", tz="Europe/Berlin")
require(jsonlite)
setwd("c:/Projects/Carsharing/beezero/samples")
files <- list.files(pattern = ".json")
vehicles_df <- data.frame()
for (fileCount in seq_along(files)) {
filename <- files[fileCount]
json_data <- fromJSON(filename)
names(json_data)
available_vehicles_df <- json_data$response$availableVehicles
vehicles_df <- data.frame(
filename = strptime(substr(filename, 1, 18), "%Y-%m-%dT%H_%M_%S", tz="Europe/Berlin"),
id = available_vehicles_df$id,
name = available_vehicles_df$name,
lat = available_vehicles_df$coordinate.latitude,
lng = available_vehicles_df$coordinate.longitude,
fuelLevel = available_vehicles_df$fuelLevel,
lastAddr = available_vehicles_df$lastAddress
)
}
write.table(vehicles_df, "vehicles_df.csv", col.names=TRUE, row.names = FALSE, sep=",")
vehicles_df <- data.frame()
for (fileCount in seq_along(files)) {
filename <- files[fileCount]
json_data <- fromJSON(filename)
names(json_data)
available_vehicles_df <- json_data$response$availableVehicles
vehicles_df <- rbind(vehicles_df, data.frame(
filename = strptime(substr(filename, 1, 18), "%Y-%m-%dT%H_%M_%S", tz="Europe/Berlin"),
id = available_vehicles_df$id,
name = available_vehicles_df$name,
lat = available_vehicles_df$coordinate.latitude,
lng = available_vehicles_df$coordinate.longitude,
fuelLevel = available_vehicles_df$fuelLevel,
lastAddr = available_vehicles_df$lastAddress
))
}
